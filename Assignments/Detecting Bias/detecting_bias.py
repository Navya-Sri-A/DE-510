# -*- coding: utf-8 -*-
"""Detecting_Bias_1ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xAvDZdzHtw9vaX4ifMid4HaGVKGpieIH
"""

!pip install beautifulsoup4

import pandas as pd

from google.colab import files

file_path = '/content/drive/MyDrive/trimet_stopevents_2022-12-07.html'

from bs4 import BeautifulSoup
from datetime import datetime, timedelta

with open(file_path, 'r') as file:
    soup = BeautifulSoup(file, 'html.parser')

all_records = []

trip_headers = soup.find_all('h2')

for heading in trip_headers:
    trip_id = heading.text.split()[-1]
    table = heading.find_next_sibling('table')
    if not table:
        continue

    headers = [th.text.strip() for th in table.find_all('th')]

    for row in table.find_all('tr')[1:]:
        cells = row.find_all('td')
        if len(cells) == len(headers):
            record = [cell.text.strip() for cell in cells]
            record_dict = dict(zip(headers, record))
            record_dict['trip_id'] = trip_id
            all_records.append(record_dict)

stops_df = pd.DataFrame(all_records)
stops_df['arrive_time'] = pd.to_numeric(stops_df['arrive_time'])

date = datetime(2022, 12, 7)
stops_df['tstamp'] = stops_df['arrive_time'].apply(lambda x: date + timedelta(seconds=x))

stops_df['vehicle_number'] = stops_df['vehicle_number'].astype(str)
stops_df['trip_id'] = stops_df['trip_id'].astype(str)
stops_df['location_id'] = stops_df['location_id'].astype(str)

stops_df['ons'] = pd.to_numeric(stops_df['ons'])
stops_df['offs'] = pd.to_numeric(stops_df['offs'])

stops_df = stops_df[['trip_id', 'vehicle_number', 'tstamp', 'location_id', 'ons', 'offs']]
print(f"The total no. of stop events : {len(stops_df)}")

vehicles = stops_df['vehicle_number'].nunique()
print(f"The total no. of unique Vehicles : {(vehicles)}")

locations = stops_df['location_id'].nunique()
print(f"The total no. of unique Stop Locations : {(locations)}")

min = stops_df['tstamp'].min()
print(f"The minimun timestamp is noted as : {(min)}")

max = stops_df['tstamp'].max()
print(f"The maximum timestamp is noted as : {(max)}")

boarding_stats = (stops_df['ons'] >= 1).sum()
print(f"The total no. of stop events at which at least one passenger boarded : {boarding_stats}")

percentage = (boarding_stats / len(stops_df)) * 100
print(f"The percentage of stop events with at least one passenger boarding : {percentage}")

location_df = stops_df[stops_df['location_id'] == '6913']
print(f"The total no. of stops made at 6913 location are : {len(location_df)}")

stop_stats = location_df['vehicle_number'].nunique()
print(f"The total no. of different buses stopped at 6913 location : {(stop_stats)}")

boarding = (location_df['ons'] >= 1).sum()
print(f"The total No. of stops at 6913 location with at least one passenger boarding : {boarding}")

percentages = (boarding  / len(location_df)) * 100
print(f"The percentage of stops at 6913 location did at least one passenger board : {percentages}")

vehicle_df = stops_df[stops_df['vehicle_number'] == '4062']
print(f"The total no. of stops made by 4062 vehicle are : {len(vehicle_df)}")

board_stats = vehicle_df['ons'].sum()
print(f"The total no. of passengers boarding the 4062 vehicle are : {board_stats}")

deboard_stats = vehicle_df['offs'].sum()
print(f"The total no. of passengers deboarding the 4062 vehicle are : {deboard_stats}")

board_stats_one = (vehicle_df['ons'] >= 1).sum()
percent = (board_stats_one  / len(vehicle_df)) * 100
print(f"The percentage of 4062 vehicle stop events did at least one passenger board : {percent}")

!pip install scipy

from scipy.stats import binomtest

count_events = len(stops_df)
count_bus_boarding_events = (stops_df['ons'] >= 1).sum()

event_percentage = count_bus_boarding_events / count_events
print(f"The percentage of stop events with boardings : {event_percentage}")

vehicle_data = stops_df.groupby('vehicle_number').agg(all_stops=('ons', 'count'),boardings=('ons', lambda x: (x >= 1).sum())).reset_index()

vehicle_data['all_stops'] = vehicle_data['all_stops']
vehicle_data['boardings'] = vehicle_data['boardings']

vehicle_data['boarding_avg'] = vehicle_data['boardings'] / vehicle_data['all_stops']

vehicle_data['p_value'] = vehicle_data.apply(
    lambda row: binomtest(
        int(row['boardings']),int(row['all_stops']),event_percentage
        ).pvalue,
    axis=1
)

bus_bias = vehicle_data[vehicle_data['p_value'] < 0.05].sort_values('p_value')
print(f"The below is the result set for binomial test to determine which buses have biased “ons” data (p < 0.05) :")
print(bus_bias[['vehicle_number', 'boarding_avg', 'p_value']])

import pandas as pd
from google.colab import files
from scipy.stats import ttest_ind

gps_df = pd.read_csv("/content/drive/MyDrive/trimet_relpos_2022-12-07.csv")

bus_biases = []

all_relpos = gps_df['RELPOS'].dropna().values

bus_data = gps_df.dropna(subset=['RELPOS']).groupby('VEHICLE_NUMBER')

for vehicle_id, group in bus_data:
    bus_relpos = group['RELPOS'].values

    t_stat, p_value = ttest_ind(bus_relpos, all_relpos, equal_var=False)

    if p_value < 0.005:
        bus_biases.append({
            'vehicle_number': vehicle_id,
            'total_gps': len(bus_relpos),
            'p_value': p_value
        })

biased_gps_df = pd.DataFrame(bus_biases)
biased_gps_df = biased_gps_df.sort_values('p_value')

print(f"The below is the result set for T-test to determine which buses have biased GPS data (p < 0.005) :")
print(biased_gps_df[[ 'vehicle_number', 'total_gps', 'p_value']])

from scipy.stats import chi2_contingency

total_offs = stops_df['offs'].sum()
total_ons = stops_df['ons'].sum()

vehicle_bias = []

all_vehicles = stops_df.groupby('vehicle_number').agg(bus_ons = ('ons', 'sum'), bus_offs = ('offs', 'sum')).reset_index()

for _, row in all_vehicles.iterrows():
    bus_ons = row['bus_ons']
    bus_offs = row['bus_offs']

    contingency_creation = [
        [bus_ons, bus_offs],
        [total_ons - bus_ons, total_offs - bus_offs]
    ]

    chi2, p_value, _, _ = chi2_contingency(contingency_creation)

    if p_value < 0.05:
        vehicle_bias.append({
            'vehicle_number': vehicle_id,
            'sum_ons': bus_ons,
            'sum_offs': bus_offs,
            'p_value': p_value
        })

biased_ons_offs_df = pd.DataFrame(vehicle_bias)
biased_ons_offs_df = biased_ons_offs_df.sort_values('p_value')

print(f"The below is the result set for Chi-squared test to determine which buses have biased ons and offs data (p < 0.005) : ")
print(biased_ons_offs_df[['vehicle_number', 'sum_ons', 'sum_offs', 'p_value']])
